name: Build and publish docker image

on:
  schedule:
    - cron: '21 7 * * *'
  push:
    branches: [ "main" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]

env:
  NODE_VERSION: 24
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository is <owner>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # Needed to provision an ephemeral certificate for cosign
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm install
      - name: Run linter
        run: npm run lint

  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # Needed to provision an ephemeral certificate for cosign
      id-token: write

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start database
        run: |
          docker compose -f docker-compose-tests.yml up -d

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }} # Use your project's Node.js version

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 4: Run tests
      - name: Run tests
        env:
          DB_USERNAME: admin
          DB_PASSWORD: admin
          DB_DATABASE: management
          DB_HOST: localhost
          DB_PORT: 27017
          S3_ENDPOINT: minio
          S3_PORT: 9000
          S3_ACCESS_KEY: minioadmin
          S3_SECRET_KEY: minioadmin
          S3_BUCKET_NAME_DEFAULT: default-bucket
          S3_BUCKET_NAME_PROFILE_PICTURES: default-bucket
          CLAMAV_URL: http://clamav-rest
          CLAMAV_PORT: 3310
        run: npm test

  build-publish-docker-image:
    needs:
      - test
      - lint
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # Needed to provision an ephemeral certificate for cosign
      id-token: write
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
      # Only install cosign if not a PR
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3.5.0
        with:
          cosign-release: 'v2.2.4'
      # Set up Buildx to enable multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      # Log in to the registry (only if not a PR)
      - name: Log into registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # Extract Docker metadata and generate tags
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          # Base name for the image
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          # Generate tags:
          #   - semver tags if pushing a version tag like v1.2.3
          #   - any other logic youâ€™d like
          tags: |
            # Tag "latest" on the main branch
            type=ref,event=branch,pattern=^main$
            # For semver version tags, e.g., v1.2.3
            type=ref,event=tag
      # Build and push multi-platform images
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          # Avoid pushing images on PRs; only push on main or tags
          push: ${{ github.event_name != 'pull_request' }}
          # Multi-arch example: amd64 and arm64
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # Leverage GHA caching
          cache-from: type=gha
          cache-to: type=gha,mode=max
      # Sign the Docker image using cosign (only when not a PR)
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        run: |
          echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
